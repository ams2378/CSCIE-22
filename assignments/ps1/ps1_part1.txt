Adil Sadik
sadik.adil@gmail.com
Extension student


Problem 1
Please see the pdf- ps1_part1.pdf


int[] a = {2, 4, 6, 8, 10, 12};
int[] b = new int[6];
int[] c = new int[6];


    Stack:           Heap:
        ----         ---------------------------
    a   | -|-------->| 2 | 4 | 6 | 8 | 10 | 12 |
        ----         ---------------------------
        ----         ---------------------------
    b   | -|-------->|   |   |   |   |    |    |
        ----         ---------------------------
        ----         ---------------------------
    c   | -|-------->|   |   |   |   |    |    |
        ----         ---------------------------


b = a;

        ----         ---------------------------
    a   | -|-------->| 2 | 4 | 6 | 8 | 10 | 12 |
        ----         |   |   |   |   |    |    |
        ----         |   |   |   |   |    |    |
    b   | -|-------->|   |   |   |   |    |    |
        ----         ---------------------------
	
- b and a both will point to the same object in heap.


for (int i = 0; i < a.length; i++) {
    c[i] = a[i];
}

        ----         ---------------------------
    a   | -|-------->| 2 | 4 | 6 | 8 | 10 | 12 |
        ----         ---------------------------
			|    |   |   |   |    |	                       
			v    v   v   v   v    v
        ----         ---------------------------
    c   | -|-------->| 2 | 4 | 6 | 8 | 10 | 12 |
        ----         ---------------------------

a[2] = c[5];

        ----         ---------------------------
    a   | -|-------->| 2 | 4 | 12 | 8 | 10 | 12 |
        ----         ---------------------------

c[2]++;

        ----         ---------------------------
    c   | -|-------->| 2 | 4 | 8 | 8 | 10 | 12 |
        ----         ---------------------------

Final result : 8 8 8 


Problem 2
1.

    public static boolean isSorrted (int[] arr) {
        if (arr==null) {
            throw new IllegalArgumentException("input arg is NULL");
        } else if (arr.length <= 1) {
            return true;
        }
        
        boolean arrayAscending = true;
        boolean arrayDescending = true;
        
        for (int i=0; i < arr.length; i++) {
            for (int j=i+1; j < arr.length; j++) {
                if (arr[i] > arr[j]) {
                    arrayAscending = false;
                }                
                
                if (arr[i] < arr[j]) {
                    arrayDescending = false;
                }           
            }
        }
        
        return (arrayAscending || arrayDescending);
    } 

2.

    public static int mostFrequentValue(int[] arr) {
        
        int mostFrequentItem=0;
        int countOccurance=0;
        int prevCountOccurance=0;
        int item=0;
        int finalCount=0;
        
        System.out.println("array length "+ arr.length); 
        
        // if array length is 1 then return the first item
        if (arr.length==1)
            return arr[0];
        
        for (int i=1; i<arr.length; i++) {
            if (arr[i]==arr[i-1]) {
                countOccurance++;
                item=arr[i];
                if (i==arr.length-1)
                    finalCount=countOccurance;
                //System.out.println("countOccurance "+ countOccurance + " value " + item ); 
            } else if (countOccurance > 0) { 
                if (countOccurance > prevCountOccurance) {
                    mostFrequentItem=item;
                    prevCountOccurance=countOccurance;
                    //System.out.println("countOccurance "+ prevCountOccurance + " value " + item ); 
                }
                finalCount=countOccurance;
                countOccurance=0;
            }
        }
        
        if (finalCount==0)
            return arr[0];
        else if (countOccurance > prevCountOccurance)
            return arr[arr.length-1];
        else 
            return mostFrequentItem;
    }

Problem 3

1.
	main() calls mystery(20, 6)
		mystery(20, 6) calls mystery(14, 6)
			mystery(14, 6) calls mystery(8, 6)
				mystery(8, 6) calls mystery(2, 6)
					mystery(2, 6) calls mystery(-4, 6)
						mystery(-4, 6) returns 1
					mystery(2, 6) returns 2 + 1 = 3
				mystery(8, 6) returns 2 + 3 = 5
			mystery(14, 6) returns 2 + 5 = 7
		mystery(20, 6) returns 2 + 7 = 9
	main()

2. 9
3. 6 - 1 for main() 5 for mystery(a,b)
4. If b is negative then it’ll produce infinite recursion. If b is negative then we will
never reach the base case because (a-b) will always be positive. 
An example value: a=4, b=-1


Problem 4

	main() calls palindrome(racecar)	
		palindrome(racecar) calls palindrome(aceca)
			palindrome(aceca) calls palindrome(cec)
				palindrome(cec) calls palindrome(e)
					palindrome(e) calls palindrome(“”)
						palindrome(“”) returns true
					palindrome(e) returns true
				palindrome(cec) returns true
			palindrome(aceca) returns true
		palindrome(racecar) returns true 
	main()

Problem 5

1.

    public static boolean search(Object item, Object[] arr) {
        for (int i = 0; i< arr.length; i++) {
            if (arr[i].equals(item)) {
                return true;
            }
        }

        return false;
    }

2.

    public static boolean search(Object item, Object[] arr, int pos) {
        
        if (pos < 0) {
            throw new IllegalArgumentException("array index can't be negative");
        } else if (arr.length==0 || pos > (arr.length-1)) {
            return false;
        } else if (pos == arr.length()) {
	     return false;	
	 }
        
        boolean itemPresent = false;
        itemPresent = search (item, arr, pos+1);
        
        if (arr[pos].equals(item) || itemPresent==true)
            return true;
        else 
            return false;
    }
