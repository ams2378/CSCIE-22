N= problem size
C= number of comparisons
M= number of moves

1. Random arrays

  N		C		M
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
1000 	     797906 	      21069 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
2000 	    3201520 	      53772 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
4000 	   12827832 	     138357 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
8000 	   51358775 	     321222 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
16000 	  205538065 	     754275 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
32000 	  822374131 	    1633929 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
64000 	 3289972085 	    4376043 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	
128000 	13160903531 	   10967223 	

Comparisons : O(n) [4*n]
Moves: O(n) [2.5*n]
Total: O(n)

If the problem size is doubled then the number of comparisons is increased by four times.
Similarly if the problem is doubled then the number of moves is also doubled (approx). So the 
complexity of this algorithm is O(n).

2. Fully sorted arrays

1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
1000 	     797906 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
2000 	    3201520 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
4000 	   12827832 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
8000 	   51358775 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
16000 	  205538065 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
32000 	  822374131 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
64000 	 3289972085 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	
128000 	13160903531 	          0 	

Comparisons : O(n) [4*n]
Moves: O(1)
Total: O(n)

In this case the number of moves is always zero regardless of problem size. So complexity of
moves is O(1) or constant. However the number of comparisons increases four times every time problem
size is doubled. So total complexity of algorithm is O(n).